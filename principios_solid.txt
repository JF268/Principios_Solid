... TRABAJO INDIVUDUAL

Principios de Solid


...1) Single Responsibility Principle (SRP)

una clase debe tener una, y solo una, razon para cambiar.

"¿esta clase tiene mas de una razon para ser cambiada?"

------------------------------------------------------------------------------------------
2) Open close (abierto - cerrado)

Las entidades deben estar abiertas a extensión, pero cerradas a modificación


Como cambiar el comportamiento de una clase, sin modificar su codigo fuente.

--- Separa el comportamiento extensible detrás de una interfaz y voltea las dependencias.


3) Principio de sustitucion

Si S es un subtipo(herencia) de T, entonces los objetos de tipo T(clase padre) pueden
ser sustituidos por objetos de tipo S(clase hija)

---> Precondiciones 

---> Postcondiciones

4) Interface Segregation

Ningun cliente debe ser forzado a depender de metodos que no usa.

--Segregar: separar, apartir, dividir.
--Interfaz: el contrato que especifica lo que la clase debe hacer

5) Dependency Invesion 

Los modulos de alto nivel no deben depender de los modulos de bajo nivel. 
Ambos deben depender de abstracciones.

Las abstracciones no deben depender de los detalles y los detalles deben depender de las 
abstracciones.


Abstracción-> seprar por medio una operacion intelectual un rasgo 
o cualidad de algo para analizarlos aisladamente.

